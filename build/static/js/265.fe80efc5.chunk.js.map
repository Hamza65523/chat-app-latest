{"version":3,"file":"static/js/265.fe80efc5.chunk.js","mappings":"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","sources":["components/hook-form/RHFCodes.js","sections/auth/VerifyForm.js","pages/auth/Verify.js","sections/auth/LoginForm.js"],"sourcesContent":["\r\nimport { useRef } from \"react\";\r\n// form\r\nimport { useFormContext, Controller } from \"react-hook-form\";\r\n// @mui\r\nimport { Stack, TextField } from \"@mui/material\";\r\n\r\n\r\nexport default function RHFCodes({ keyName = \"\", inputs = [], ...other }) {\r\n  const codesRef = useRef(null);\r\n\r\n  const { control } = useFormContext();\r\n\r\n  const handleChangeWithNextField = (event, handleChange) => {\r\n    const { maxLength, value, name } = event.target;\r\n\r\n    const fieldIndex = name.replace(keyName, \"\");\r\n\r\n    const fieldIntIndex = Number(fieldIndex);\r\n\r\n    const nextfield = document.querySelector(\r\n      `input[name=${keyName}${fieldIntIndex + 1}]`\r\n    );\r\n\r\n    if (value.length > maxLength) {\r\n      event.target.value = value[0];\r\n    }\r\n\r\n    if (value.length >= maxLength && fieldIntIndex < 6 && nextfield !== null) {\r\n      nextfield.focus();\r\n    }\r\n\r\n    handleChange(event);\r\n  };\r\n\r\n  return (\r\n    <Stack direction=\"row\" spacing={2} justifyContent=\"center\" ref={codesRef}>\r\n      {inputs.map((name, index) => (\r\n        <Controller\r\n          key={name}\r\n          name={`${keyName}${index + 1}`}\r\n          control={control}\r\n          render={({ field, fieldState: { error } }) => (\r\n            <TextField\r\n              {...field}\r\n              error={!!error}\r\n              autoFocus={index === 0}\r\n              placeholder=\"-\"\r\n              onChange={(event) => {\r\n                handleChangeWithNextField(event, field.onChange);\r\n              }}\r\n              onFocus={(event) => event.currentTarget.select()}\r\n              InputProps={{\r\n                sx: {\r\n                  width: { xs: 36, sm: 56 },\r\n                  height: { xs: 36, sm: 56 },\r\n                  \"& input\": { p: 0, textAlign: \"center\" },\r\n                },\r\n              }}\r\n              inputProps={{\r\n                maxLength: 1,\r\n                type: \"number\",\r\n              }}\r\n              {...other}\r\n            />\r\n          )}\r\n        />\r\n      ))}\r\n    </Stack>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport { Stack, IconButton, InputAdornment, Button } from \"@mui/material\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport { Eye, EyeSlash } from \"phosphor-react\";\r\nimport RHFCodes from \"../../components/hook-form/RHFCodes\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { VerifyEmail } from \"../../redux/slices/auth\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function VerifyForm() {\r\n  const dispatch = useDispatch();\r\n  const { email } = useSelector((state) => state.auth);\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    code1: Yup.string().required(\"Code is required\"),\r\n    code2: Yup.string().required(\"Code is required\"),\r\n    code3: Yup.string().required(\"Code is required\"),\r\n    code4: Yup.string().required(\"Code is required\"),\r\n    code5: Yup.string().required(\"Code is required\"),\r\n    code6: Yup.string().required(\"Code is required\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    code1: \"\",\r\n    code2: \"\",\r\n    code3: \"\",\r\n    code4: \"\",\r\n    code5: \"\",\r\n    code6: \"\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    mode: \"onChange\",\r\n    resolver: yupResolver(VerifyCodeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting, errors },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      //   Send API Request\r\n      dispatch(\r\n        VerifyEmail({\r\n          email,\r\n          otp: `${data.code1}${data.code2}${data.code3}${data.code4}${data.code5}${data.code6}`,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFCodes\r\n          keyName=\"code\"\r\n          inputs={[\"code1\", \"code2\", \"code3\", \"code4\", \"code5\", \"code6\"]}\r\n        />\r\n\r\n        <Button\r\n          fullWidth\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          sx={{\r\n            mt: 3,\r\n            bgcolor: \"text.primary\",\r\n            color: (theme) =>\r\n              theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n            \"&:hover\": {\r\n              bgcolor: \"text.primary\",\r\n              color: (theme) =>\r\n                theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n            },\r\n          }}\r\n        >\r\n          Verify\r\n        </Button>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n","import { Link as RouterLink } from \"react-router-dom\";\r\n// sections\r\nimport { Stack, Typography, Link } from \"@mui/material\";\r\nimport AuthSocial from \"../../sections/auth/AuthSocial\";\r\nimport Login from \"../../sections/auth/LoginForm\";\r\nimport VerifyForm from \"../../sections/auth/VerifyForm\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function LoginPage() {\r\n  return (\r\n    <>\r\n      <Stack spacing={2} sx={{ mb: 5, position: \"relative\" }}>\r\n        <Typography variant=\"h4\">Please Verify OTP</Typography>\r\n\r\n        <Stack direction=\"row\" spacing={0.5}>\r\n          <Typography variant=\"body2\">\r\n            Sent to email (shreyanshshah242@gmail.com)\r\n          </Typography>\r\n        </Stack>\r\n      </Stack>\r\n      {/* Form */}\r\n      <VerifyForm />\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport * as Yup from \"yup\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n// form\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n// @mui\r\nimport { Link, Stack, Alert, IconButton, InputAdornment } from \"@mui/material\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n// components\r\nimport FormProvider, { RHFTextField } from \"../../components/hook-form\";\r\nimport { Eye, EyeSlash } from \"phosphor-react\";\r\nimport { LoginUser } from \"../../redux/slices/auth\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AuthLoginForm() {\r\n  const dispatch = useDispatch();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const {isLoading} = useSelector((state) => state.auth);\r\n\r\n  const LoginSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Email must be a valid email address\"),\r\n    password: Yup.string().required(\"Password is required\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: \"demo@tawk.com\",\r\n    password: \"demo1234\",\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(LoginSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      console.log(data);\r\n      // submit data to backend\r\n      dispatch(LoginUser(data));\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        {!!errors.afterSubmit && (\r\n          <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n        )}\r\n\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? \"text\" : \"password\"}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton\r\n                  onClick={() => setShowPassword(!showPassword)}\r\n                  edge=\"end\"\r\n                >\r\n                  {showPassword ? <Eye /> : <EyeSlash />}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Stack>\r\n\r\n      <Stack alignItems=\"flex-end\" sx={{ my: 2 }}>\r\n        <Link component={RouterLink} to=\"/auth/reset-password\" variant=\"body2\" color=\"inherit\" underline=\"always\">\r\n          Forgot password?\r\n        </Link>\r\n      </Stack>\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        color=\"inherit\"\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isLoading}\r\n        sx={{\r\n          bgcolor: \"text.primary\",\r\n          color: (theme) =>\r\n            theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n          \"&:hover\": {\r\n            bgcolor: \"text.primary\",\r\n            color: (theme) =>\r\n              theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n          },\r\n        }}\r\n      >\r\n        Login\r\n      </LoadingButton>\r\n    </FormProvider>\r\n  );\r\n}\r\n"],"names":["RHFCodes","keyName","inputs","other","codesRef","useRef","control","useFormContext","Stack","direction","spacing","justifyContent","ref","map","name","index","render","field","error","fieldState","TextField","autoFocus","placeholder","onChange","event","handleChange","target","maxLength","value","fieldIndex","replace","fieldIntIndex","Number","nextfield","document","querySelector","length","focus","handleChangeWithNextField","onFocus","currentTarget","select","InputProps","sx","width","xs","sm","height","p","textAlign","inputProps","type","VerifyForm","dispatch","useDispatch","email","useSelector","state","auth","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","methods","useForm","mode","resolver","yupResolver","defaultValues","handleSubmit","formState","onSubmit","isSubmitting","errors","data","VerifyEmail","otp","console","Button","fullWidth","size","variant","mt","bgcolor","color","theme","palette","LoginPage","mb","position","Typography","AuthLoginForm","useState","showPassword","setShowPassword","isLoading","LoginSchema","password","reset","setError","log","LoginUser","message","afterSubmit","severity","label","endAdornment","onClick","edge","alignItems","my","component","RouterLink","to","underline","loading"],"sourceRoot":""}